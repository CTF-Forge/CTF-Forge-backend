basePath: /
definitions:
  dtos.ChallengeCreateResponse:
    properties:
      message:
        type: string
    type: object
  dtos.ChallengeDetailResponse:
    properties:
      category:
        type: string
      description:
        type: string
      flag:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      score:
        type: integer
      title:
        type: string
    type: object
  dtos.ChallengePublicDTO:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      is_solved:
        type: boolean
      score:
        type: integer
      title:
        type: string
    type: object
  dtos.CreateChallengeRequest:
    properties:
      category:
        description: カテゴリー名を文字列として受け取ります
        type: string
      description:
        type: string
      flag:
        type: string
      is_public:
        type: boolean
      score:
        type: integer
      title:
        type: string
    required:
    - flag
    - score
    - title
    type: object
  dtos.SubmissionRequest:
    properties:
      flag:
        type: string
    required:
    - flag
    type: object
  dtos.SubmissionResponse:
    properties:
      correct:
        type: boolean
      message:
        type: string
    type: object
  dtos.UpdateChallengeRequest:
    properties:
      category:
        type: string
      description:
        type: string
      flag:
        type: string
      is_public:
        type: boolean
      score:
        type: integer
      title:
        type: string
    type: object
  handler.ErrorResponse:
    properties:
      error:
        example: error message
        type: string
    type: object
  handler.LoginRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  handler.MeResponse:
    description: 自分のユーザー情報
    properties:
      created_at:
        example: "2024-08-01T12:34:56Z"
        type: string
      email:
        example: test@example.com
        type: string
      user_id:
        example: 1
        type: integer
      username:
        example: testuser
        type: string
    type: object
  handler.MessageResponse:
    properties:
      message:
        example: success message
        type: string
    type: object
  handler.OAuthResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      message:
        example: oauth authentication successful
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        properties:
          email:
            example: test@example.com
            type: string
          provider:
            example: github
            type: string
          username:
            example: testuser
            type: string
        type: object
    type: object
  handler.RefreshTokenRequest:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    required:
    - refresh_token
    type: object
  handler.RegisterRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: password123
        minLength: 8
        type: string
      username:
        example: testuser
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  handler.TokenResponse:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      expires_in:
        example: 3600
        type: integer
      message:
        example: login successful
        type: string
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.Challenge:
    properties:
      category:
        $ref: '#/definitions/models.ChallengeCategory'
      categoryID:
        type: integer
      createdAt:
        type: string
      description:
        type: string
      flag:
        type: string
      id:
        type: integer
      isPublic:
        type: boolean
      score:
        type: integer
      title:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.ChallengeCategory:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      passwordHash:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: CTFForgeは、誰もがCTFの問題を作成し、公開できるプラットフォームです。
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CTFForge API
  version: "1.0"
paths:
  /api/challenges:
    post:
      consumes:
      - application/json
      description: 認証されたユーザーが新しい問題を作成します
      parameters:
      - description: 問題作成情報
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateChallengeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.ChallengeCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 新しい問題を作成
      tags:
      - challenges
  /api/challenges/{challengeId}:
    delete:
      consumes:
      - application/json
      description: 既存の問題を削除します
      parameters:
      - description: Challenge ID
        in: path
        name: challengeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 問題を削除
      tags:
      - challenges
    get:
      description: 問題IDを指定して、問題の詳細を取得します（所有者のみフラグ表示）
      parameters:
      - description: Challenge ID
        in: path
        name: challengeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChallengeDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 問題詳細を取得
      tags:
      - challenges
    put:
      consumes:
      - application/json
      description: 既存の問題を更新します
      parameters:
      - description: Challenge ID
        in: path
        name: challengeId
        required: true
        type: integer
      - description: 問題更新情報
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateChallengeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: 問題を更新
      tags:
      - challenges
  /api/challenges/{challengeId}/submit:
    post:
      consumes:
      - application/json
      description: 問題にフラグを提出し、正解かどうかを検証します
      parameters:
      - description: Challenge ID
        in: path
        name: challengeId
        required: true
        type: integer
      - description: 提出情報
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/dtos.SubmissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 提出結果
          schema:
            $ref: '#/definitions/dtos.SubmissionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: フラグを提出
      tags:
      - challenges
  /api/me:
    get:
      description: JWT認証ユーザーの情報を返す
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - bearer: []
      summary: 自分のユーザー情報取得
      tags:
      - user
  /api/me/challenges:
    get:
      description: 認証されたユーザーが作成した問題のリストを取得します
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Challenge'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      security:
      - BearerAuth: []
      summary: ユーザーが作成した問題を取得
      tags:
      - challenges
  /api/public/challenges:
    get:
      description: 公開されているすべての問題のリストを取得します
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.ChallengePublicDTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: 公開されているすべての問題を取得
      tags:
      - public_challenges
  /api/public/challenges/{challengeId}:
    get:
      description: 問題IDを指定して、公開用の問題詳細を取得します
      parameters:
      - description: Challenge ID
        in: path
        name: challengeId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.ChallengePublicDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: 公開用の問題詳細を取得
      tags:
      - public_challenges
  /auth/{provider}:
    get:
      description: 指定したプロバイダーでOAuth認証を開始します
      parameters:
      - description: プロバイダー名
        enum:
        - github
        - google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "307":
          description: リダイレクト
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: OAuth認証開始
      tags:
      - oauth
  /auth/{provider}/callback:
    get:
      description: OAuth認証のコールバックを処理し、JWTトークンを発行します
      parameters:
      - description: プロバイダー名
        enum:
        - github
        - google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.OAuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: OAuth認証コールバック
      tags:
      - oauth
  /auth/login:
    post:
      consumes:
      - application/json
      description: メールとパスワードでログインします
      parameters:
      - description: ログイン情報
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: ユーザーログイン
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: ユーザーログアウトします
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MessageResponse'
      summary: ログアウト
      tags:
      - auth
  /auth/oauth/logout:
    post:
      consumes:
      - application/json
      description: OAuthログアウト処理を行います
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.MessageResponse'
      summary: OAuthログアウト
      tags:
      - oauth
  /auth/oauth/refresh:
    post:
      consumes:
      - application/json
      description: リフレッシュトークンを使用して新しいトークンペアを生成します
      parameters:
      - description: リフレッシュトークン
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: OAuthトークン更新
      tags:
      - oauth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: リフレッシュトークンを使用して新しいアクセストークンを取得します
      parameters:
      - description: リフレッシュトークン
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: トークン更新
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: 新規ユーザーを登録します
      parameters:
      - description: 登録情報
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/handler.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handler.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.ErrorResponse'
      summary: ユーザー登録
      tags:
      - auth
securityDefinitions:
  bearer:
    description: Bearer token for authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
